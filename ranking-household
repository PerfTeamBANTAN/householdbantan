<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Rangking Household — Dashboard</title>

  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

  <style>
    body {
      font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
      background: #fff;
      color: #222;
      padding-top: 70px;
    }

    .page-header {
      display:flex;
      align-items:center;
      gap:12px;
      margin-bottom: 18px;
    }

    .page-title {
      font-weight:700;
      font-size:20px;
    }

    /* Table style to resemble screenshot */
    .rank-table {
      border-collapse: collapse;
      width: 100%;
      background: #fff;
      box-shadow: 0 2px 6px rgba(0,0,0,0.06);
    }

    .rank-table thead th {
      background: #0b0b0b; /* strong black */
      color: #fff;
      font-weight:700;
      padding: 8px 10px;
      text-align:center;
      border: 1px solid rgba(255,255,255,0.05);
      white-space: nowrap;
    }

    .rank-table tbody td {
      border: 1px solid #e8e8e8;
      padding: 6px 8px;
      vertical-align: middle;
      font-size: 13px;
    }

    /* Target cell (red) */
    .cell-target {
      background: #d94b4b;
      color: #fff;
      text-align:center;
      font-weight:700;
    }

    /* Growth points colors and badges */
    .gp {
      font-weight:700;
      text-align:center;
    }
    .gp.positive { color: #2c9a3d; } /* green */
    .gp.negative { color: #d23b3b; } /* red */
    .gp.neutral { color: #666; }

    /* Small index column style */
    .index-col {
      font-weight:700;
      background: #f3f3f3;
      text-align:left;
    }

    /* Highlight row groups */
    .group-header {
      background: #0b0b0b;
      color:#fff;
      font-weight:700;
      padding:8px 10px;
    }

    /* responsive */
    .table-responsive { overflow-x:auto; }

    /* Loading & error */
    #loading { text-align:center; padding:40px 0; color:#666; }
    #error { color:#b00020; padding:15px; }
  </style>
</head>
<body>

  <nav class="navbar navbar-expand-lg navbar-light bg-white fixed-top shadow-sm">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">PERFORMANCE BAN-TAN</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navMain">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navMain">
        <ul class="navbar-nav me-auto">
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" data-bs-toggle="dropdown">Rangking</a>
            <ul class="dropdown-menu">
              <li><a class="dropdown-item active" href="ranking-household.html">Rangking Household</a></li>
              <li><a class="dropdown-item" href="#">Rangking B2C</a></li>
              <li><a class="dropdown-item" href="#">Rangking B2B</a></li>
            </ul>
          </li>
          <!-- other menus omitted for brevity -->
        </ul>
      </div>
    </div>
  </nav>

  <main class="container">
    <div class="page-header">
      <img src="PERFORMANCE TEAM.png" alt="" style="height:42px;">
      <div>
        <div class="page-title">Ranking Household — RANKING HSA</div>
        <small class="text-muted">Data diambil dari Google Sheets (ID spreadsheet &gt; RANKING HSA)</small>
      </div>
    </div>

    <div id="loading">Memuat data dari Google Sheets…</div>
    <div id="error" class="d-none"></div>

    <div class="table-responsive d-none" id="tableWrap">
      <table class="rank-table" id="rankTable">
        <thead id="tableHead"></thead>
        <tbody id="tableBody"></tbody>
      </table>
    </div>
  </main>

  <script>
    // --- KONFIGURASI: ganti sesuai spreadsheet Anda ---
    const SPREADSHEET_ID = '1nJ5FQ4A9sd4FsxRXuAMr42eHalnd0N2Rm7dK_05Filg';
    const SHEET_NAME = 'RANKING HSA';
    // endpoint gviz JSON (tidak memerlukan API key jika sheet dipublikasikan ke publik)
    const GVIZ_URL = `https://docs.google.com/spreadsheets/d/${SPREADSHEET_ID}/gviz/tq?sheet=${encodeURIComponent(SHEET_NAME)}&tqx=out:json`;

    // fetch gviz JSON and parse it
    fetch(GVIZ_URL)
      .then(r => r.text())
      .then(text => {
        // gviz returns something like: /*O_o*/\ngoogle.visualization.Query.setResponse({...});
        const jsonText = text.replace(/^[\s\S]*?setResponse\(|\);?\s*$/g, '');
        const data = JSON.parse(jsonText);
        buildTableFromGviz(data.table);
      })
      .catch(err => {
        document.getElementById('loading').classList.add('d-none');
        const e = document.getElementById('error');
        e.classList.remove('d-none');
        e.textContent = 'Gagal memuat sheet. Pastikan sheet dibuat public / dapat diakses. Error: ' + err.message;
      });

    function buildTableFromGviz(table) {
      document.getElementById('loading').classList.add('d-none');

      const cols = table.cols.map(c => c.label || c.id || '');
      const rows = table.rows || [];

      // Build thead
      const thead = document.getElementById('tableHead');
      const trHead = document.createElement('tr');

      cols.forEach((label, i) => {
        const th = document.createElement('th');
        th.textContent = label;
        trHead.appendChild(th);
      });
      thead.appendChild(trHead);

      // Build tbody
      const tbody = document.getElementById('tableBody');
      tbody.innerHTML = '';

      rows.forEach((r, rowIndex) => {
        const tr = document.createElement('tr');

        r.c.forEach((cell, colIndex) => {
          const td = document.createElement('td');
          let value = (cell && ('v' in cell)) ? cell.v : (cell && cell.f) ? cell.f : '';

          // Format if value is null/empty
          if (value === null || value === undefined) value = '';

          // Apply custom styling rules to mimic sheet look
          // Example heuristics:
          // - If header-like (first column text equals "KPI B2C" etc): make group header row
          if (colIndex === 0 && typeof value === 'string' && value.trim().length > 0) {
            // some rows in sheet may be group headers; we detect simple heuristic:
            const vTrim = value.trim();
            if (vTrim === 'KPI B2C' || vTrim === 'KPI B2B' || vTrim === 'KPI 12 PI LATEN') {
              // full-width group header: create special row
              const groupTr = document.createElement('tr');
              const groupTd = document.createElement('td');
              groupTd.colSpan = cols.length;
              groupTd.className = 'group-header';
              groupTd.textContent = vTrim;
              groupTr.appendChild(groupTd);
              tbody.appendChild(groupTr);
              return; // skip adding normal cells for this original row
            }
          }

          // Example: if column label contains "TARGET" or cell value equals 'TARGET' -> red cell
          const headerLabel = (cols[colIndex] || '').toUpperCase();
          if (headerLabel.includes('TARGET') || (typeof value === 'string' && value.toUpperCase() === 'TARGET')) {
            td.className = 'cell-target';
            td.textContent = value;
            tr.appendChild(td);
            return;
          }

          // If value is numeric: style positive/negative
          if (typeof value === 'number') {
            td.textContent = value;
            td.className = 'gp ' + (value > 0 ? 'positive' : (value < 0 ? 'negative' : 'neutral'));
            tr.appendChild(td);
            return;
          }

          // If formatted string like "-2 Point" or "3 Point", try parse leading number
          if (typeof value === 'string' && value.match(/-?\d+/)) {
            const numMatch = value.match(/-?\d+/);
            const n = parseInt(numMatch[0], 10);
            if (!isNaN(n)) {
              td.textContent = value;
              td.className = 'gp ' + (n > 0 ? 'positive' : (n < 0 ? 'negative' : 'neutral'));
              tr.appendChild(td);
              return;
            }
          }

          // Default: plain text
          td.textContent = value;
          tr.appendChild(td);
        });

        // push row to tbody
        tbody.appendChild(tr);
      });

      // show table
      document.getElementById('tableWrap').classList.remove('d-none');
    }
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
